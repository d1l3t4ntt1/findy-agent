// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol/connection/connection_protocol_test.go

// Package connection is a generated GoMock package.
package connection

import (
	reflect "reflect"

	comm "github.com/findy-network/findy-agent/agent/comm"
	endp "github.com/findy-network/findy-agent/agent/endp"
	managed "github.com/findy-network/findy-agent/agent/managed"
	sec "github.com/findy-network/findy-agent/agent/sec"
	ssi "github.com/findy-network/findy-agent/agent/ssi"
	api "github.com/findy-network/findy-agent/agent/storage/api"
	core "github.com/findy-network/findy-agent/core"
	method "github.com/findy-network/findy-agent/method"
	gomock "github.com/golang/mock/gomock"
)

// MockReceiverMock is a mock of ReceiverMock interface.
type MockReceiverMock struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockMockRecorder
}

// MockReceiverMockMockRecorder is the mock recorder for MockReceiverMock.
type MockReceiverMockMockRecorder struct {
	mock *MockReceiverMock
}

// NewMockReceiverMock creates a new mock instance.
func NewMockReceiverMock(ctrl *gomock.Controller) *MockReceiverMock {
	mock := &MockReceiverMock{ctrl: ctrl}
	mock.recorder = &MockReceiverMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiverMock) EXPECT() *MockReceiverMockMockRecorder {
	return m.recorder
}

// AddDIDCache mocks base method.
func (m *MockReceiverMock) AddDIDCache(DID *ssi.DID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDIDCache", DID)
}

// AddDIDCache indicates an expected call of AddDIDCache.
func (mr *MockReceiverMockMockRecorder) AddDIDCache(DID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDIDCache", reflect.TypeOf((*MockReceiverMock)(nil).AddDIDCache), DID)
}

// AddPipeToPWMap mocks base method.
func (m *MockReceiverMock) AddPipeToPWMap(p sec.Pipe, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPipeToPWMap", p, name)
}

// AddPipeToPWMap indicates an expected call of AddPipeToPWMap.
func (mr *MockReceiverMockMockRecorder) AddPipeToPWMap(p, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipeToPWMap", reflect.TypeOf((*MockReceiverMock)(nil).AddPipeToPWMap), p, name)
}

// AddToPWMap mocks base method.
func (m *MockReceiverMock) AddToPWMap(me, you core.DID, name string) sec.Pipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPWMap", me, you, name)
	ret0, _ := ret[0].(sec.Pipe)
	return ret0
}

// AddToPWMap indicates an expected call of AddToPWMap.
func (mr *MockReceiverMockMockRecorder) AddToPWMap(me, you, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPWMap", reflect.TypeOf((*MockReceiverMock)(nil).AddToPWMap), me, you, name)
}

// AttachSAImpl mocks base method.
func (m *MockReceiverMock) AttachSAImpl(implID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AttachSAImpl", implID)
}

// AttachSAImpl indicates an expected call of AttachSAImpl.
func (mr *MockReceiverMockMockRecorder) AttachSAImpl(implID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSAImpl", reflect.TypeOf((*MockReceiverMock)(nil).AttachSAImpl), implID)
}

// AutoPermission mocks base method.
func (m *MockReceiverMock) AutoPermission() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoPermission")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AutoPermission indicates an expected call of AutoPermission.
func (mr *MockReceiverMockMockRecorder) AutoPermission() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoPermission", reflect.TypeOf((*MockReceiverMock)(nil).AutoPermission))
}

// CAEndp mocks base method.
func (m *MockReceiverMock) CAEndp(connID string) *endp.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAEndp", connID)
	ret0, _ := ret[0].(*endp.Addr)
	return ret0
}

// CAEndp indicates an expected call of CAEndp.
func (mr *MockReceiverMockMockRecorder) CAEndp(connID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAEndp", reflect.TypeOf((*MockReceiverMock)(nil).CAEndp), connID)
}

// ExportWallet mocks base method.
func (m *MockReceiverMock) ExportWallet(key, exportPath string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportWallet", key, exportPath)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExportWallet indicates an expected call of ExportWallet.
func (mr *MockReceiverMockMockRecorder) ExportWallet(key, exportPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportWallet", reflect.TypeOf((*MockReceiverMock)(nil).ExportWallet), key, exportPath)
}

// FindPWByID mocks base method.
func (m *MockReceiverMock) FindPWByID(id string) (*api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPWByID", id)
	ret0, _ := ret[0].(*api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPWByID indicates an expected call of FindPWByID.
func (mr *MockReceiverMockMockRecorder) FindPWByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPWByID", reflect.TypeOf((*MockReceiverMock)(nil).FindPWByID), id)
}

// ID mocks base method.
func (m *MockReceiverMock) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockReceiverMockMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockReceiverMock)(nil).ID))
}

// IsCA mocks base method.
func (m *MockReceiverMock) IsCA() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCA")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCA indicates an expected call of IsCA.
func (mr *MockReceiverMockMockRecorder) IsCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCA", reflect.TypeOf((*MockReceiverMock)(nil).IsCA))
}

// IsEA mocks base method.
func (m *MockReceiverMock) IsEA() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEA")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEA indicates an expected call of IsEA.
func (mr *MockReceiverMockMockRecorder) IsEA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEA", reflect.TypeOf((*MockReceiverMock)(nil).IsEA))
}

// LoadDID mocks base method.
func (m *MockReceiverMock) LoadDID(did string) core.DID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDID", did)
	ret0, _ := ret[0].(core.DID)
	return ret0
}

// LoadDID indicates an expected call of LoadDID.
func (mr *MockReceiverMockMockRecorder) LoadDID(did interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDID", reflect.TypeOf((*MockReceiverMock)(nil).LoadDID), did)
}

// LoadTheirDID mocks base method.
func (m *MockReceiverMock) LoadTheirDID(connection api.Connection) core.DID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTheirDID", connection)
	ret0, _ := ret[0].(core.DID)
	return ret0
}

// LoadTheirDID indicates an expected call of LoadTheirDID.
func (mr *MockReceiverMockMockRecorder) LoadTheirDID(connection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTheirDID", reflect.TypeOf((*MockReceiverMock)(nil).LoadTheirDID), connection)
}

// ManagedWallet mocks base method.
func (m *MockReceiverMock) ManagedWallet() (managed.Wallet, managed.Wallet) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedWallet")
	ret0, _ := ret[0].(managed.Wallet)
	ret1, _ := ret[1].(managed.Wallet)
	return ret0, ret1
}

// ManagedWallet indicates an expected call of ManagedWallet.
func (mr *MockReceiverMockMockRecorder) ManagedWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedWallet", reflect.TypeOf((*MockReceiverMock)(nil).ManagedWallet))
}

// MasterSecret mocks base method.
func (m *MockReceiverMock) MasterSecret() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterSecret")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasterSecret indicates an expected call of MasterSecret.
func (mr *MockReceiverMockMockRecorder) MasterSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterSecret", reflect.TypeOf((*MockReceiverMock)(nil).MasterSecret))
}

// MyCA mocks base method.
func (m *MockReceiverMock) MyCA() comm.Receiver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyCA")
	ret0, _ := ret[0].(comm.Receiver)
	return ret0
}

// MyCA indicates an expected call of MyCA.
func (mr *MockReceiverMockMockRecorder) MyCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyCA", reflect.TypeOf((*MockReceiverMock)(nil).MyCA))
}

// MyDID mocks base method.
func (m *MockReceiverMock) MyDID() core.DID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyDID")
	ret0, _ := ret[0].(core.DID)
	return ret0
}

// MyDID indicates an expected call of MyDID.
func (mr *MockReceiverMockMockRecorder) MyDID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyDID", reflect.TypeOf((*MockReceiverMock)(nil).MyDID))
}

// NewDID mocks base method.
func (m_2 *MockReceiverMock) NewDID(m method.Type, args ...string) (core.DID, error) {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "NewDID", varargs...)
	ret0, _ := ret[0].(core.DID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDID indicates an expected call of NewDID.
func (mr *MockReceiverMockMockRecorder) NewDID(m interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDID", reflect.TypeOf((*MockReceiverMock)(nil).NewDID), varargs...)
}

// NewOutDID mocks base method.
func (m *MockReceiverMock) NewOutDID(didInfo ...string) (core.DID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range didInfo {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewOutDID", varargs...)
	ret0, _ := ret[0].(core.DID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOutDID indicates an expected call of NewOutDID.
func (mr *MockReceiverMockMockRecorder) NewOutDID(didInfo ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutDID", reflect.TypeOf((*MockReceiverMock)(nil).NewOutDID), didInfo...)
}

// Pool mocks base method.
func (m *MockReceiverMock) Pool() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(int)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockReceiverMockMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockReceiverMock)(nil).Pool))
}

// PwPipe mocks base method.
func (m *MockReceiverMock) PwPipe(pw string) (sec.Pipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PwPipe", pw)
	ret0, _ := ret[0].(sec.Pipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PwPipe indicates an expected call of PwPipe.
func (mr *MockReceiverMockMockRecorder) PwPipe(pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PwPipe", reflect.TypeOf((*MockReceiverMock)(nil).PwPipe), pw)
}

// RootDid mocks base method.
func (m *MockReceiverMock) RootDid() core.DID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootDid")
	ret0, _ := ret[0].(core.DID)
	return ret0
}

// RootDid indicates an expected call of RootDid.
func (mr *MockReceiverMockMockRecorder) RootDid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootDid", reflect.TypeOf((*MockReceiverMock)(nil).RootDid))
}

// SaveTheirDID mocks base method.
func (m *MockReceiverMock) SaveTheirDID(did, vk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTheirDID", did, vk)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTheirDID indicates an expected call of SaveTheirDID.
func (mr *MockReceiverMockMockRecorder) SaveTheirDID(did, vk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTheirDID", reflect.TypeOf((*MockReceiverMock)(nil).SaveTheirDID), did, vk)
}

// SendNYM mocks base method.
func (m *MockReceiverMock) SendNYM(targetDid *ssi.DID, submitterDid, alias, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNYM", targetDid, submitterDid, alias, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNYM indicates an expected call of SendNYM.
func (mr *MockReceiverMockMockRecorder) SendNYM(targetDid, submitterDid, alias, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNYM", reflect.TypeOf((*MockReceiverMock)(nil).SendNYM), targetDid, submitterDid, alias, role)
}

// WDID mocks base method.
func (m *MockReceiverMock) WDID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WDID")
	ret0, _ := ret[0].(string)
	return ret0
}

// WDID indicates an expected call of WDID.
func (mr *MockReceiverMockMockRecorder) WDID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WDID", reflect.TypeOf((*MockReceiverMock)(nil).WDID))
}

// Wallet mocks base method.
func (m *MockReceiverMock) Wallet() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallet")
	ret0, _ := ret[0].(int)
	return ret0
}

// Wallet indicates an expected call of Wallet.
func (mr *MockReceiverMockMockRecorder) Wallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallet", reflect.TypeOf((*MockReceiverMock)(nil).Wallet))
}

// WorkerEA mocks base method.
func (m *MockReceiverMock) WorkerEA() comm.Receiver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerEA")
	ret0, _ := ret[0].(comm.Receiver)
	return ret0
}

// WorkerEA indicates an expected call of WorkerEA.
func (mr *MockReceiverMockMockRecorder) WorkerEA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerEA", reflect.TypeOf((*MockReceiverMock)(nil).WorkerEA))
}
